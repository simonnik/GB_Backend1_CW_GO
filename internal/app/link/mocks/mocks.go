// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/simonnik/GB_Backend1_CW_GO/internal/app/link (interfaces: Delivery,Usecase,Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	models "github.com/simonnik/GB_Backend1_CW_GO/internal/models"
)

// MockDelivery is a mock of Delivery interface.
type MockDelivery struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryMockRecorder
}

// MockDeliveryMockRecorder is the mock recorder for MockDelivery.
type MockDeliveryMockRecorder struct {
	mock *MockDelivery
}

// NewMockDelivery creates a new mock instance.
func NewMockDelivery(ctrl *gomock.Controller) *MockDelivery {
	mock := &MockDelivery{ctrl: ctrl}
	mock.recorder = &MockDeliveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelivery) EXPECT() *MockDeliveryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDelivery) Create(arg0 echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDeliveryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDelivery)(nil).Create), arg0)
}

// HTML mocks base method.
func (m *MockDelivery) HTML(arg0 echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTML", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HTML indicates an expected call of HTML.
func (mr *MockDeliveryMockRecorder) HTML(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTML", reflect.TypeOf((*MockDelivery)(nil).HTML), arg0)
}

// Redirect mocks base method.
func (m *MockDelivery) Redirect(arg0 echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Redirect indicates an expected call of Redirect.
func (mr *MockDeliveryMockRecorder) Redirect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockDelivery)(nil).Redirect), arg0)
}

// Stat mocks base method.
func (m *MockDelivery) Stat(arg0 echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stat indicates an expected call of Stat.
func (mr *MockDeliveryMockRecorder) Stat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockDelivery)(nil).Stat), arg0)
}

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsecase) Create(arg0 context.Context, arg1 *models.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), arg0, arg1)
}

// FindAllByToken mocks base method.
func (m *MockUsecase) FindAllByToken(arg0 context.Context, arg1 string) (models.StatList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByToken", arg0, arg1)
	ret0, _ := ret[0].(models.StatList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByToken indicates an expected call of FindAllByToken.
func (mr *MockUsecaseMockRecorder) FindAllByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByToken", reflect.TypeOf((*MockUsecase)(nil).FindAllByToken), arg0, arg1)
}

// FindByToken mocks base method.
func (m *MockUsecase) FindByToken(arg0 context.Context, arg1 string) (*models.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", arg0, arg1)
	ret0, _ := ret[0].(*models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockUsecaseMockRecorder) FindByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockUsecase)(nil).FindByToken), arg0, arg1)
}

// SaveStat mocks base method.
func (m *MockUsecase) SaveStat(arg0 context.Context, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStat", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStat indicates an expected call of SaveStat.
func (mr *MockUsecaseMockRecorder) SaveStat(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStat", reflect.TypeOf((*MockUsecase)(nil).SaveStat), arg0, arg1, arg2)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 context.Context, arg1 *models.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// FindAllByToken mocks base method.
func (m *MockRepository) FindAllByToken(arg0 context.Context, arg1 string) (models.StatList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByToken", arg0, arg1)
	ret0, _ := ret[0].(models.StatList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByToken indicates an expected call of FindAllByToken.
func (mr *MockRepositoryMockRecorder) FindAllByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByToken", reflect.TypeOf((*MockRepository)(nil).FindAllByToken), arg0, arg1)
}

// FindByToken mocks base method.
func (m *MockRepository) FindByToken(arg0 context.Context, arg1 string) (*models.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", arg0, arg1)
	ret0, _ := ret[0].(*models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockRepositoryMockRecorder) FindByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockRepository)(nil).FindByToken), arg0, arg1)
}

// SaveStat mocks base method.
func (m *MockRepository) SaveStat(arg0 context.Context, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStat", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStat indicates an expected call of SaveStat.
func (mr *MockRepositoryMockRecorder) SaveStat(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStat", reflect.TypeOf((*MockRepository)(nil).SaveStat), arg0, arg1, arg2)
}
